# -*- coding: utf-8 -*-
"""24141160_Naimur Islam Navid

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sPHD3G36HHUQEkfV0lyfXiqM8T3wbWPQ
"""

#task1

import math
import random as rnd




Starter = int(input("Enter 0 for Carlsen, 1 for Caruana: "))
carlsen_strength = float(input("Enter base strength for Carlsen: "))
caruana_strength = float(input("Enter base strength for Caruana: "))





branchfactor = 2
maximum_depth = 5
leaf_nodes = branchfactor ** maximum_depth
alpha, beta = -100, 100

# print(leaf_nodes)



def strength_function(x):
    strength = math.log2(x + 1) + x / 10
    # print(x)
    # print(strength)
    return strength




def utility_function(leaf_nodes, max_str, min_str):
    u_val = []
    for i in range(leaf_nodes):
        i = rnd.choice([0, 1])
        rnd_factor = (-1) ** i * (rnd.randint(1, 10) / 10)
        u_val.append(strength_function(max_str) - strength_function(min_str) + rnd_factor)
        # print(u_val)
    return u_val




def player_turn(index, depth, alpha, beta, maxv, u_val):
    if maxv:
        max_val = float("-inf")
        # print(max_val)

        for i in range(branchfactor):
            maxval2 = alphabeta_puringfunction(
                index * branchfactor + i, depth + 1, alpha, beta, False, u_val
            )

            max_val = max(max_val, maxval2)
            alpha = max(alpha, max_val)

            if beta <= alpha:
                break
        return max_val
    else:
        min_value = float("inf")
        # print(min_value)
        for i in range(branchfactor):
            minval = alphabeta_puringfunction(
                index * branchfactor + i, depth + 1, alpha, beta, True, u_val
            )
            min_value = min(min_value, minval)
            beta = min(beta, min_value)

            if beta <= alpha:
                break
        return min_value

# main function
def alphabeta_puringfunction(index, depth, alpha, beta, maxv, u_val):
    if depth == maximum_depth:
        return u_val[index]

    return player_turn(index, depth, alpha, beta, maxv, u_val)



count_carlsen = 0
count_caruana = 0
result = []
current_player = Starter

for round_num in range(4):
    if current_player == 0:
        max_str = carlsen_strength
        min_str = caruana_strength
    else:
        max_str = caruana_strength
        min_str = carlsen_strength

    update_utility_values = utility_function(leaf_nodes, max_str, min_str)
    winner = alphabeta_puringfunction(
        0, 0, alpha, beta, current_player == 0, update_utility_values
    )


    if winner > 0:
        if current_player == 0:
            player = "Magnus Carlsen"
            count_carlsen += 1
        else:
            player = "Fabiano Caruana"
            count_caruana += 1
    elif winner < 0:
        if current_player == 0:
            player = "Fabiano Caruana"
            count_caruana += 1
        else:
            player = "Magnus Carlsen"
            count_carlsen += 1
    else:
        player = "Draw"

    result.append((player, winner))
    print(f"Game {round_num + 1} Winner: {player} (Utility value: {winner:.2f})")


    current_player = 1 - current_player


print("\nOverall Results:")
print(f"Magnus Carlsen Wins: {count_carlsen}")
print(f"Fabiano Caruana Wins: {count_caruana}")
print(f"Draws: {4 - count_carlsen - count_caruana}")

if count_carlsen > count_caruana:
    print("Overall Winner: Magnus Carlsen")
elif count_caruana > count_carlsen:
    print("Overall Winner: Fabiano Caruana")
else:
    print("Overall Winner: Draw")

#task2

import math
import random as rnd


player_starter = int(input("Enter who goes first (0 for Light, 1 for L): "))
m_cost = float(input("Enter the cost of using Mind Control: "))
light_strength = float(input("Enter base strength for Light: "))
l_strength = float(input("Enter base strength for L: "))


branchfactor = 2
max_depth = 5
leaf_nodes = branchfactor ** max_depth
alpha, beta = -100, 100

print(leaf_nodes)


def strength_function(x):
  strength= math.log2(x+1)+x/10
  # print(x)
  # print(strength)
  return strength


def utility_function(leaf_nodes, max_str, min_str):

    utility_values = []

    for i in range(leaf_nodes):
        i = rnd.choice([0, 1])
        random_factor = (-1) ** i * (rnd.randint(1, 10) / 10)
        utility_values.append(strength_function(max_str) - strength_function(min_str) + random_factor)
    return utility_values


def alphabeta_pruning_function(index, depth, alpha, beta, maxv, utility_values, mind_control=False):
    if depth == max_depth:
        return utility_values[index]

    if maxv:
        max_value = float("-inf")
        for i in range(branchfactor):
            value = alphabeta_pruning_function(
                index * branchfactor + i,
                depth + 1,
                alpha,
                beta, False,
                utility_values,
                mind_control
            )
            max_value = max(max_value, value)
            alpha = max(alpha, max_value)
            if beta <= alpha:
                break
        return max_value
    else:
        if mind_control:

            f_val = float("inf")
            for i in range(branchfactor):
                value = alphabeta_pruning_function(
                    index * branchfactor + i,
                    depth + 1,
                    alpha, beta,
                    True, utility_values,
                    mind_control
                )
                f_val = min(f_val, value)
            return f_val
        else:
            min_value = float("inf")
            for i in range(branchfactor):
                value = alphabeta_pruning_function(
                    index * branchfactor + i, depth + 1, alpha, beta, True, utility_values, mind_control
                )
                min_value = min(min_value, value)
                beta = min(beta, min_value)
                if beta <= alpha:
                    break
            return min_value


if player_starter == 0:
    max_str = light_strength
    min_str = l_strength
else:
    max_str = l_strength
    min_str = light_strength

#---------------------------------------------------------------------------------------------
utility_values = utility_function(leaf_nodes, max_str, min_str)


normal_value = alphabeta_pruning_function(0, 0, alpha, beta, player_starter == 0, utility_values, mind_control=False)


m_val = alphabeta_pruning_function(0, 0, alpha, beta, player_starter == 0, utility_values, mind_control=True)


mval_cost = m_val - m_cost

#------------------------------------------------------------------------------


print(f"\nMinimax value without Mind Control: {normal_value:.2f}")

print(f"Minimax value with Mind Control: {m_val:.2f}")

print(f"Minimax value with Mind Control after incurring the cost: {mval_cost:.2f}")


if mval_cost > normal_value:
    print("\nLight should use Mind Control.")

else:
    print("\nLight should NOT use Mind Control.")